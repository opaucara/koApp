Index: Scripts/app/ViewModels/manageEvents.js
===================================================================
--- Scripts/app/ViewModels/manageEvents.js	(revision 11371)
+++ Scripts/app/ViewModels/manageEvents.js	(working copy)
@@ -6,24 +6,28 @@
     this.gmap = null;
     this.showForm = ko.observable(false);
     this.eventModel = new Event();
+    var hasLocationData = false;
 
-    this.bag = {
+    /*this.bag = {
       administrative: ko.observable(),
       locality: ko.observable(),
       country: ko.observable(),
       latitude: ko.observable(),
       longitude: ko.observable()
-    };
+    };*/
 
     this.fullLocation = ko.computed(function(){
-      var administrative = this.bag.administrative();
+      /*var administrative = this.bag.administrative();
       var locality = this.bag.locality();
-      var country = this.bag.country();
-      return (administrative && locality && country)?
-                locality + ' ' + administrative + ', ' + country: null;
+      var country = this.bag.country();*/
+      hasLocationData = this.eventModel.state() && this.eventModel.city() && this.eventModel.country();
+      return hasLocationData? (this.eventModel.state() + ' ' + this.eventModel.city() + ', ' + this.eventModel.country() ) : null;
+      /*(administrative && locality && country)?
+                locality + ' ' + administrative + ', ' + country: null;*/
+
     }, this);
 
-    this.bag.country.subscribe(function(newValue){
+    /*this.bag.country.subscribe(function(newValue){
       this.eventModel.country(newValue);
     }, this);
     this.bag.administrative.subscribe(function(newValue){
@@ -37,7 +41,7 @@
     }, this);
     this.bag.longitude.subscribe(function(newValue){
       this.eventModel.longitude(newValue);
-    }, this);
+    }, this);*/
 
 
     this.loadData = function () {
@@ -48,15 +52,18 @@
           this.gmap = GMap.initialize({mapContainer: '#map_canvas'});
           this.gmap.addMarkers(this.eventList());
 
-          var promise = this.gmap.createPlaceAutocomplete($('.autocompleteGoogle').get(0), {
-                                                            reverseLocation:true,
-                                                            bag: this.bag
-                                                          });
-          promise.then(_.bind(function(data){
+          var promise = this.gmap.createPlaceAutocomplete(
+                          $('.autocompleteGoogle').get(0), 
+                          {
+                            reverseLocation:true
+                          },
+                          handleResults
+                        );
+          /*promise.then(_.bind(function(data){
             this.eventModel.country(data.country);
             this.eventModel.state(data.administrative);
             this.eventModel.city(data.locality);
-          }, this));
+          }, this));*/
           
         }, this)).
         fail(function (a,b,c) {
@@ -64,6 +71,17 @@
 
     };
 
+    var handleResults = _.bind(function(results) {
+      //{formated_addres: 'n' || adress_components: []}
+      //[0] ->
+      //{formated_addres: 'n' || adress_components: []}
+      this.eventModel.country(results.country);
+      this.eventModel.state(results.administrative);
+      this.eventModel.city(results.locality);
+      this.eventModel.latitude(results.latitude);
+      this.eventModel.longitude(results.longitude);
+    }, this);
+
     this.goToRegionView = _.bind(function(item){
       this.gmap.panTo(item.gMarker);
       this.gmap.showCard(item.gInfowindow, item.gMarker);
Index: Scripts/lib/custom/GMap.js
===================================================================
--- Scripts/lib/custom/GMap.js	(revision 11371)
+++ Scripts/lib/custom/GMap.js	(working copy)
@@ -9,7 +9,10 @@
     var infoWindow;
     var markers = [];
     var markerForAutocomplete = null;
-
+    var placeOptions = {
+      types: ['geocode']
+    };
+    
     var options = {
                     zoom: 3,
                     streetViewControl: false,
@@ -145,14 +148,13 @@
     };
 
     //TODO refactor needed here, this method has to much responsabilities
-    var createPlaceAutocomplete = function(htmlInput, settings){
-      var autocomplete = new google.maps.places.Autocomplete(htmlInput);
+    var createPlaceAutocomplete = function(htmlInput, settings, handleResults){
+      var autocomplete = new google.maps.places.Autocomplete(htmlInput, placeOptions);
       infowindowForAutocomplete = new google.maps.InfoWindow();
       markerForAutocomplete = new google.maps.Marker({
         map: map,
         draggable: true
       });
-      autocomplete.setTypes(['geocode']);
       google.maps.event.addListener(autocomplete, 'place_changed', function() {
         infowindowForAutocomplete.close();
         markerForAutocomplete.setVisible(false);
@@ -161,6 +163,7 @@
           return;
         }
         // If the place has a geometry, then present it on a map.
+        
         if (place.geometry.viewport) {
           map.fitBounds(place.geometry.viewport);
         } else {
@@ -177,7 +180,7 @@
         markerForAutocomplete.setPosition(place.geometry.location);
         markerForAutocomplete.setVisible(true);
 
-        var address = '';
+        /*var address = '';
         if (place.address_components) {
           address = [
             (place.address_components[0] && place.address_components[0].short_name || ''),
@@ -193,19 +196,22 @@
         settings.bag.longitude(place.geometry.location.lng());
         settings.bag.country(politicalComponentes.country);
         settings.bag.locality(politicalComponentes.locality);
-        settings.bag.administrative(politicalComponentes.administrative);
+        settings.bag.administrative(politicalComponentes.administrative);*/
+        var locationInfo = auxCleanAddress(place)
+        handleResults(locationInfo);
 
-        infowindowForAutocomplete.setContent('<div><strong>' + politicalComponentes.country + '</strong><br>' + (politicalComponentes.locality?politicalComponentes.locality + ', ':'') + (politicalComponentes.administrative? politicalComponentes.administrative: ''));
+        infowindowForAutocomplete.setContent('<div><strong>' + (locationInfo.locality?locationInfo.locality + ', ':'') + '</strong><br>' + (locationInfo.administrative || '') + locationInfo.country);
         infowindowForAutocomplete.open(map, markerForAutocomplete);
+        
       });
       if (settings.reverseLocation) {
-        return bindReverseDragMarker(markerForAutocomplete, settings.bag);
+        return bindReverseDragMarker(markerForAutocomplete, handleResults); 
       }
       //TODO this 
       return $.Deferred().promise();
     };
 
-    var bindReverseDragMarker = function(requestMarker, bag){
+    var bindReverseDragMarker = function(requestMarker, handleResults){
       var def = $.Deferred();
       google.maps.event.addListener(requestMarker, 'dragend', function(mouseEvt){
         var request = {
@@ -216,14 +222,16 @@
           if (status == google.maps.GeocoderStatus.OK) {
             
             //results[0].geometry.location
-            var politicalComponentes = auxCleanAddress(results[0]);
-            infowindowForAutocomplete.setContent('<div><strong>' + politicalComponentes.administrative?politicalComponentes.administrative:'' + '</strong><br>' + politicalComponentes.locality + ',' + politicalComponentes.country);
+            var locationInfo = auxCleanAddress(results[0]);
+            handleResults(locationInfo);
+            infowindowForAutocomplete.setContent('<div><strong>' + (locationInfo.locality?locationInfo.locality + ', ':'') + '</strong><br>' + locationInfo.administrative + locationInfo.country);
+            //infowindowForAutocomplete.setContent('<div><strong>' + politicalComponentes.administrative?politicalComponentes.administrative:'' + '</strong><br>' + politicalComponentes.locality + ',' + politicalComponentes.country);
             //infowindowForAutocomplete.setContent('<div><strong>' + results[0].formatted_address + '</strong><br>');
             infowindowForAutocomplete.open(map, markerForAutocomplete);
             requestMarker.setMap(map);
 
             //var politicalComponentes = auxCleanAddress(results[0]);
-            var politicalComponentes = {};
+            /*var politicalComponentes = {};
             _.each(results[0].address_components, function(item, a){
               if (item.types && item.types[1] && item.types[1] === 'political'){
                 if ( item.types[0] === 'country'){
@@ -242,10 +250,11 @@
             politicalComponentes.latitude = results[0].geometry.location.lat();
             politicalComponentes.longitude = results[0].geometry.location.lng();
             bag.latitude(results[0].geometry.location.lat());
-            bag.longitude(results[0].geometry.location.lng());
+            bag.longitude(results[0].geometry.location.lng());*/
 
+            //name it to buildLocationInfo
             
-            def.resolve(politicalComponentes);
+            //def.resolve(politicalComponentes);
           }else {
             def.resolve(null);
           }
@@ -255,9 +264,9 @@
     };
 
     //TODO this function
-    var auxCleanAddress = function(location) {
+    var auxCleanAddress = function(locations) {
       var politicalComponentes = {};
-      _.each(location.address_components, function(item, a){
+      _.each(locations.address_components, function(item, a){
         if (item.types && item.types[1] && item.types[1] === 'political'){
           if ( item.types[0] === 'country'){
             politicalComponentes.country = item.long_name;
@@ -265,9 +274,13 @@
             politicalComponentes.locality = item.long_name;
           }else if (item.types[0] === 'administrative_area_level_1'){
             politicalComponentes.administrative = item.long_name;
+          }else if (item.types[0] ==='administrative_area_level_2'){
+            politicalComponentes.administrative2 = item.long_name;
           }
         }
       });
+      politicalComponentes['latitude'] = locations.geometry.location.lat();
+      politicalComponentes['longitude'] = locations.geometry.location.lng();
       return politicalComponentes;
     };
 
